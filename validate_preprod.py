#!/usr/bin/env python
"""
üöÄ Validation Finale Pr√©production Cinetopia
Script de validation compl√®te avant fusion vers main
"""

import os
import sys
import json
import subprocess
from datetime import datetime
from pathlib import Path

def run_command(command, capture_output=True):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=capture_output,
            text=True,
            timeout=60
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "Timeout"

def check_git_status():
    """V√©rifie l'√©tat du repository git"""
    print("üîç V√©rification de l'√©tat Git...")
    
    # V√©rifier la branche actuelle
    success, branch_output, _ = run_command("git branch --show-current")
    if success:
        current_branch = branch_output.strip()
        print(f"  üìç Branche actuelle: {current_branch}")
    
    # V√©rifier les changements non commit√©es
    success, status_output, _ = run_command("git status --porcelain")
    if success and status_output.strip():
        print("  ‚ö†Ô∏è  Changements non commit√©es d√©tect√©s:")
        print(f"     {status_output}")
        return False
    
    # V√©rifier les commits en avance
    success, ahead_output, _ = run_command("git log origin/dev..HEAD --oneline")
    if success and ahead_output.strip():
        commits = ahead_output.strip().split('\n')
        print(f"  üì§ {len(commits)} commit(s) en avance sur origin/dev")
    
    return True

def run_comprehensive_tests():
    """Ex√©cute tous les tests disponibles"""
    print("üß™ Ex√©cution des tests complets...")
    
    test_results = {}
    
    # Tests pr√©production
    success, output, error = run_command("python test_preprod.py")
    test_results['preprod'] = {
        'success': success,
        'output': output,
        'error': error
    }
    
    # Tests de base
    if Path("test_app.py").exists():
        success, output, error = run_command("python test_app.py")
        test_results['base'] = {
            'success': success,
            'output': output,
            'error': error
        }
    
    return test_results

def check_security():
    """V√©rifications de s√©curit√©"""
    print("üîí V√©rifications de s√©curit√©...")
    
    security_issues = []
    
    # V√©rifier les fichiers sensibles
    sensitive_files = [".env", ".env.dev", ".env.local"]
    for file in sensitive_files:
        if Path(file).exists():
            # V√©rifier si le fichier est dans .gitignore
            success, gitignore_content, _ = run_command("cat .gitignore")
            if success and file not in gitignore_content:
                security_issues.append(f"Fichier sensible {file} non ignor√© par Git")
    
    # V√©rifier les cl√©s secr√®tes dans le code
    success, grep_output, _ = run_command('grep -r "SECRET_KEY.*=" . --include="*.py" --exclude-dir=venv*')
    if success and "SECRET_KEY" in grep_output and "os.environ" not in grep_output:
        security_issues.append("Cl√© secr√®te possiblement hardcod√©e")
    
    return security_issues

def generate_deployment_report():
    """G√©n√®re un rapport de d√©ploiement"""
    print("üìã G√©n√©ration du rapport de d√©ploiement...")
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "branch": "preprod",
        "status": "ready",
        "checks": {}
    }
    
    # Informations Git
    success, branch, _ = run_command("git branch --show-current")
    if success:
        report["current_branch"] = branch.strip()
    
    success, last_commit, _ = run_command("git log -1 --format='%H %s'")
    if success:
        report["last_commit"] = last_commit.strip()
    
    # Sauvegarder le rapport
    with open("deployment_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    return report

def main():
    """Fonction principale de validation"""
    print("""
    üöÄ VALIDATION FINALE PR√âPRODUCTION
    ===================================
    V√©rification compl√®te avant fusion vers main
    """)
    
    validation_passed = True
    
    # 1. V√©rification Git
    if not check_git_status():
        print("‚ùå Probl√®mes Git d√©tect√©s")
        validation_passed = False
    else:
        print("‚úÖ √âtat Git correct")
    
    # 2. Tests complets
    test_results = run_comprehensive_tests()
    all_tests_passed = all(result['success'] for result in test_results.values())
    
    if all_tests_passed:
        print("‚úÖ Tous les tests sont pass√©s")
    else:
        print("‚ùå Certains tests ont √©chou√©")
        for test_name, result in test_results.items():
            if not result['success']:
                print(f"  - {test_name}: √âCHEC")
                if result['error']:
                    print(f"    Erreur: {result['error']}")
        validation_passed = False
    
    # 3. V√©rifications de s√©curit√©
    security_issues = check_security()
    if security_issues:
        print("‚ùå Probl√®mes de s√©curit√© d√©tect√©s:")
        for issue in security_issues:
            print(f"  - {issue}")
        validation_passed = False
    else:
        print("‚úÖ S√©curit√© valid√©e")
    
    # 4. G√©n√©ration du rapport
    report = generate_deployment_report()
    print(f"‚úÖ Rapport g√©n√©r√©: deployment_report.json")
    
    # R√©sultat final
    print("\n" + "="*50)
    if validation_passed:
        print("üéâ VALIDATION R√âUSSIE!")
        print("‚úÖ Le projet est pr√™t pour la fusion vers main")
        print("\nProchaines √©tapes:")
        print("  1. git checkout main")
        print("  2. git merge preprod")
        print("  3. git push origin main")
        print("  4. D√©ploiement en production")
        return 0
    else:
        print("‚ùå VALIDATION √âCHOU√âE!")
        print("‚ö†Ô∏è  Corrigez les probl√®mes avant de continuer")
        print("\nActions requises:")
        print("  1. Corriger les erreurs identifi√©es")
        print("  2. Commitez les corrections")
        print("  3. Relancer la validation")
        return 1

if __name__ == "__main__":
    sys.exit(main())